local actors = {}
local group_trigger = {}
local gate_locks = {}

local function map_position(x, y)
	return vmath.vector3(x*64-32, y*64-32, 0.3)
end

local function setup_map(self)
	local our_url = msg.url()
	local x, y, w, h = tilemap.get_bounds("map#level1")
	for ix = x, x+w-1 do
		for iy = y, y+h-1 do
			local map_id = tilemap.get_tile("map#level1", "setup", ix, iy)
			local map_id_foreground = tilemap.get_tile("map#level1", "foreground", ix, iy)
			local p_pos = map_position(ix, iy)
			-- setup map
			if map_id == 74 then
				self.p = factory.create("/factory#factory_player", p_pos, nil, {is_player=true, control_url = our_url})
				tilemap.set_tile("map#level1", "setup", ix, iy, 0)
				table.insert(actors, self.p)
			elseif map_id == 40 then
				local varlue_m = {grid_x = ix, grid_y = iy}
				factory.create("/factory#factory_trigger", p_pos)
				table.insert(group_trigger, varlue_m)
			elseif map_id == 41 then
				local o = factory.create("/factory#factory_box", p_pos, nil, {control_url = our_url})
				tilemap.set_tile("map#level1", "setup", ix, iy, 0)
				table.insert(actors, o)
			end

			-- collect foreground gate
			if map_id_foreground == 11 then
				local value_foreground = {grid_x = ix, grid_y = iy}
				table.insert(gate_locks, value_foreground)
			end
		end
	end
end

local function check_tile_foreground(self, x, y)
	return tilemap.get_tile("map#level1", "foreground", x, y)
end

local function gameobject_current_grid(self, gameobject)
	local pos = go.get_position(gameobject)
	local grid = {x = math.floor((pos.x - 32) / 64)+1, y = math.floor((pos.y - 32) / 64)+1}
	return grid
end

local function is_not_wall(self, grid_x, grid_y)
	local tilemap_id = check_tile_foreground(self, grid_x, grid_y)
	local is_wall = not (tilemap_id == 8 or tilemap_id == 11)
	return is_wall
end

local function object_on_tiles(self, x, y)
	for key, value in ipairs(actors) do
		local o = actors[key]
		local grid_o = gameobject_current_grid(self, o)
		if grid_o.x == x and grid_o.y == y then
			return o
		end
	end
	return nil
end

local function input_vector(self, action_id)
	local vec3_move = vmath.vector3()
	if action_id == hash("left") then
		vec3_move.x = -1
	elseif action_id == hash("right") then
		vec3_move.x = 1
	elseif action_id == hash("up") then
		vec3_move.y = 1
	elseif action_id == hash("down") then
		vec3_move.y = -1
	end
	return vec3_move
end

local function grid_to_string(self, grid)
	local string = ""
	if grid.x == -1 and grid.y == 0 then
		string = "left"
	elseif grid.x == 1 and grid.y == 0 then
		string = "right"
	elseif grid.x == 0 and grid.y == 1 then
		string = "up"
	elseif grid.x == 0 and grid.y == -1 then
		string = "down"
	end
	return string
end

local function check_all_trigger_locked(self)
	for key, value in ipairs(group_trigger) do
		local o = object_on_tiles(self, value.grid_x, value.grid_y)
		if o == nil then
			return true
		end
	end
	return false
end

local function open_all_gate(self, lock)
	local gate = lock and 19 or 11
	for key, value in ipairs(gate_locks) do
		tilemap.set_tile("map#level1", "foreground", value.grid_x, value.grid_y, gate)
	end
end


local function simulate_movement(self, add_x, add_y)
	local p = self.p
	local grid_p = gameobject_current_grid(self, p)
	local o = object_on_tiles(self, grid_p.x+add_x, grid_p.y+add_y)
	local string_move = "move_" .. grid_to_string(self, vmath.vector3(add_x, add_y, 0))
	if o then
		local grid_o = gameobject_current_grid(self, o)
		local o_loop2 = object_on_tiles(self, grid_o.x+add_x, grid_o.y+add_y)
		if(is_not_wall(self, grid_o.x+add_x, grid_o.y+add_y) and o_loop2 == nil) then
			msg.post(o, string_move)
			msg.post(p, string_move)
		end
	elseif is_not_wall(self, grid_p.x+add_x, grid_p.y+add_y)  then
		msg.post(p, string_move)
	end
end

local function check_winning(self)
	local grid_p = gameobject_current_grid(self, self.p)
	local tile_id = check_tile_foreground(self, grid_p.x, grid_p.y)
	if tile_id == 65 then
		msg.post("ui#ingame", "winning")
		msg.post(".", "release_input_focus")
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	setup_map(self)
end

function on_input(self, action_id, action)
	if(action.pressed)then
		if(action_id == hash("left") or action_id == hash("right") or action_id == hash("up") or action_id == hash("down") )then
			local vec3 = input_vector(self, action_id)
			simulate_movement(self, vec3.x, vec3.y)
		end
		timer.delay(0.05, false, check_winning)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("open_gate") then
		local will_open = not check_all_trigger_locked(self)
		if will_open then
			open_all_gate(self, true)
		end
	elseif message_id == hash("close_gate") then
		open_all_gate(self, false)
	end	
end