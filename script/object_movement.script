local function current_grid(self)
	local pos = go.get_position(".")
	local grid = {x = math.floor((pos.x - 32) / 64)+1, y = math.floor((pos.y - 32) / 64)+1}
	return grid
end

local function check_tile_id(self, add_x, add_y)
	local x = add_x and add_x or 0
	local y = add_y and add_y or 0
	local grid = current_grid(self)
	local tilemap_id = tilemap.get_tile("map#level1", "foreground", grid.x + x, grid.y+y)
	return tilemap_id
end

local function is_not_wall(self, add_x, add_y)
	local next_tilemap_id = check_tile_id(self, add_x, add_y)
	return next_tilemap_id ~= 8
end

local function move(self, string_message)
	local pos = go.get_position(".")
	if string_message == hash("move_left") then
		pos.x = pos.x-64
	elseif string_message == hash("move_right") then
		pos.x = pos.x+64
	elseif string_message == hash("move_up") then
		pos.y = pos.y+64
	elseif string_message == hash("move_down")then
		pos.y = pos.y-64
	end
	go.set_position(pos)
end


go.property("is_player", false)
go.property("control_url", msg.url())
function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- move
	if message_id == hash("move_left") or message_id == hash("move_right") or message_id == hash("move_up") or message_id == hash("move_down") then
		move(self, message_id, message)
	end

	if message_id == hash("trigger_response")then
		local grid = current_grid(self)
		if message.enter and message.other_group == hash("box_place") and message.own_group == hash("box") then
			msg.post(self.control_url, "open_gate", {grid_x = grid.x, grid_y = grid.y})
		elseif message.enter == false and message.other_group == hash("box_place") and message.own_group == hash("box") then
			msg.post(self.control_url, "close_gate", {grid_x = grid.x, grid_y = grid.y})
		end
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
